# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile version
vagrantfile_tag = ENV['VF_TAG'] || "1.0.1"

# Computing
vagrant_cpu_num = ENV['VAGRANT_CPU_NUM'] || 2
vagrant_mem = ENV['VAGRANT_MEM'] || 8192

# Networking
# private_ip = ENV['PRIVATE_IP'] || "192.168.50.153"

# Base box selection
if ENV['ARM_CHECK'] != "arm64"
  base_box = ENV['BASE_BOX'] || "bento/ubuntu-21.04"
  box_version = ENV['BOX_VERSION'] || "202109.07.0"
else
  base_box = ENV['BASE_BOX'] || "rkrause/ubuntu-21.10-arm64"
  box_version = ENV['BOX_VERSION'] || "1.0.0"
end

# Vault variables
vault_install = ["true", "1"].include?((ENV['VAULT_INSTALL'] || true).to_s.downcase)
vault_host_port = ENV['VAULT_HOST_PORT'] || 8200
vault_version = ENV['VAULT_VERSION'] || "1.8.4"
vault_group = "vault"
vault_user = "vault"
vault_comment = "Vault"
vault_home = "/srv/vault"

# Consul variables
consul_install = ["true", "1"].include?((ENV['CONSUL_INSTALL'] || true).to_s.downcase)
consul_host_port = ENV['CONSUL_HOST_PORT'] || 8500
consul_version = ENV['CONSUL_VERSION'] || "1.10.4"
consul_group = "consul"
consul_user = "consul"
consul_comment = "Consul"
consul_home = "/srv/consul"
cni_install = ["true", "1"].include?((ENV['CNI_INSTALL'] || true).to_s.downcase)
cni_version = ENV['CNI_VERSION'] || "0.9.1"

# Nomad variables
nomad_install = ["true", "1"].include?((ENV['NOMAD_INSTALL'] || true).to_s.downcase)
nomad_host_port = ENV['NOMAD_HOST_PORT'] || 4646
nomad_version = ENV['NOMAD_VERSION'] || "1.1.6"
nomad_group = "nomad"
nomad_user = "nomad"
nomad_home = "/srv/nomad"

# Docker variables
docker_install = ["true", "1"].include?((ENV['DOCKER_INSTALL'] || true).to_s.downcase)
if base_box != "bento/centos-7"
  containerd_version = ENV['CONTAINERD_VERSION'] || "1.4.11-1"
  docker_ce_version = ENV['DOCKER_CE_VERSION'] || "20.10.10~3-0~ubuntu"
else
  containerd_version = ENV['CONTAINERD_VERSION'] || "1.4.9-3.1"
  docker_ce_version = ENV['DOCKER_CE_VERSION'] || "20.10.8-3"
end
envoy_version = ENV['ENVOY_VERSION'] || "1.18.2.p0.gd362e79-1p75.g76c310e"
docker_scan_version = ENV['DOCKER_SCAN_VERSION'] || "0.8.0-3"

# Monitoring variables
monitoring_install = ["true", "1"].include?((ENV['MONITORING_INSTALL'] || true).to_s.downcase)
prometheus_version = ENV['PROMETHEUS_VERSION'] || "2.28.1"
if base_box != "bento/centos-7"
  grafana_version = ENV['GRAFANA_VERSION'] || "8.1.0"
else
  grafana_version = ENV['GRAFANA_VERSION'] || "8.1.0-1"
end
# Tests tag to permorm only tests ansible tasks
# tests_tag = ENV['TESTS_ONLY']

# Provision only these ansible roles
tags_only = ENV['TAGS_ONLY']

Vagrant.configure("2") do |config|
  config.vm.define "hashicorp-labs"

  # Use vagrant insecure public key, comment this out to restrict access
  config.ssh.insert_key = false

  # Setup networking
  # config.vm.network :private_network, ip: private_ip
  # config.vm.network "private_network", type: "dhcp"
  
  # Increase memory for Virtualbox
  config.vm.provider "virtualbox" do |vb|
    vb.name = "hashicorp-labs-#{vagrantfile_tag}"
    vb.memory = vagrant_mem
    vb.cpus = vagrant_cpu_num
  end
  
  # Increase memory for VMware
  ["vmware_fusion", "vmware_workstation"].each do |p|
    config.vm.provider p do |v|
      v.vmx["memsize"] = vagrant_mem
      v.vmx["numvcpus"] = vagrant_cpu_num
      v.vmx["tools.upgrade.policy"] = "manual"
      if base_box == "bento/ubuntu-21.04"
        v.vmx["virtualhw.version"] = 18
      end
      v.vmx["ethernet0.pcislotnumber"] = "160"
    end
  end
  
  # Set box version
  config.vm.box = base_box
  config.vm.box_version = box_version

  # Set hostname
  config.vm.hostname = "nomad"
  
  ansible_tags = ['common']
  # Forward Vault port
  if (vault_install)
    config.vm.network :forwarded_port, guest: 8200, host: vault_host_port, auto_correct: true
    ansible_tags.concat(['vault'])
  end
  if (consul_install)
    config.vm.network :forwarded_port, guest: 8500, host: consul_host_port, auto_correct: true
    ansible_tags.concat(['consul', 'envoy'])
  end
  if (cni_install)
    ansible_tags.concat(['cni'])
  end
  if (nomad_install)
    config.vm.network :forwarded_port, guest: 4646, host: nomad_host_port, auto_correct: true
    ansible_tags.concat(['nomad'])
  end
  if (docker_install)
    ansible_tags.concat(['docker'])
  end
  if (monitoring_install)
    ansible_tags.concat(['monitoring'])
  end
  
  if !tags_only.to_s.empty?
    ansible_tags = [tags_only.split(",")]
  end
  
  ansible_tags.concat(['tests'])
  
  config.vm.provision :ansible_local do |ansible|
    ansible.playbook = "ansible/playbook.yml"
    ansible.inventory_path = "ansible/inventory"
    ansible.config_file = "ansible/ansible.cfg"
	  ansible.limit = 'all'
	  ansible.tags = ansible_tags
    # ansible.verbose = '-vvv'
    ansible.extra_vars = {
      vault_group: vault_group,
      vault_user: vault_user,
      vault_home: vault_home,
      vault_version: vault_version,
      consul_group: consul_group,
      consul_user: consul_user,
      consul_home: consul_home,
      consul_version: consul_version,
      envoy_version: envoy_version,
      cni_version: cni_version,
      nomad_group: nomad_group,
      nomad_user: nomad_user,
      nomad_home: nomad_home,
      nomad_version: nomad_version,
      containerd_version: containerd_version,
      docker_ce_version: docker_ce_version,
      docker_scan_version: docker_scan_version,
      prometheus_version: prometheus_version,
      grafana_version: grafana_version,
      faas_arm: ENV['ARM_CHECK'] != "arm64",
    }

  # Forward Ingress port
  config.vm.network :forwarded_port, guest: 8080, host: 8080, auto_correct: true 

  end

end
